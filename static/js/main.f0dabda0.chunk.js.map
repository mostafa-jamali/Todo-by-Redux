{"version":3,"sources":["Redux/Todo/Todo.reducer.js","Redux/RootReducer.js","Redux/store.js","Component/Search/Search.jsx","Component/ToggleTextCard/ToggleTextCard.jsx","Component/CardTodo/CardTodo.jsx","Component/todo/Todo.jsx","Redux/Todo/Todo.types.js","view/AddTodo/AddTodo.jsx","Redux/Todo/Todo.action.js","App.js","serviceWorker.js","index.js"],"names":["initialState","todo_List","id","title","text","checkList","status","todoReducer","state","action","type","payload","combineReducers","todoList","middlewares","logger","store","createStore","RootReducer","applyMiddleware","Search","search","handleChange","Form","className","FormGroup","Label","htmlFor","Input","name","value","onChange","ToggleTextCard","check","key","CardTodo","item","useState","dropdownOpen","setDropdownOpen","dropdownId","setDropdownId","toggleId","setToggleId","toggleShow","setToggleShow","Col","Card","CardHeader","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","CardBody","CardTitle","Button","onClick","map","connect","setSearch","searchTodo","filter","toLowerCase","startsWith","event","target","Row","xs","md","xl","to","addTodo","todo","types","history","useHistory","checkItem","setCheckItem","onSubmit","preventDefault","push","placeholder","color","length","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0dabda0.chunk.js","sourcesContent":["const initialState = {\r\n    todo_List: [\r\n        {\r\n            id: 1,\r\n            title: \"title1\",\r\n            text: \"text1\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: false },\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            title: \"title2\",\r\n            text: \"text2\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: true },\r\n            ]\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"title3\",\r\n            text: \"text3\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: true },\r\n            ]\r\n        }\r\n    ]\r\n}\r\nconst todoReducer = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case (\"ADD_TODO\"):\r\n            return {\r\n                ...state,\r\n                todo_List: [...state.todo_List, payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default todoReducer;","import {combineReducers} from 'redux';\r\nimport todoReducer from './Todo/Todo.reducer';\r\n\r\nexport default combineReducers({\r\n    todoList: todoReducer,\r\n})","import { applyMiddleware, createStore } from 'redux';\r\nimport RootReducer from './RootReducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst middlewares = [logger];\r\n\r\nexport const store = createStore(\r\n    RootReducer,\r\n    applyMiddleware(...middlewares)\r\n)","import React from 'react'\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nfunction Search({search, handleChange}) {\r\n    return (\r\n        <Form className=\"px-5 py-2 mx-5 rounded bg-info\">\r\n            <FormGroup>\r\n                <Label htmlFor='search'>Search todo</Label>\r\n                <Input type='search' id='search' name={'search'} value={search} onChange={handleChange} />\r\n            </FormGroup>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\nimport { FormGroup, Input } from 'reactstrap';\r\n\r\nfunction ToggleTextCard({ check }) {\r\n    return (\r\n        <li key={check.id}>\r\n            <FormGroup check>\r\n                <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck\" />\r\n                {check.status ? <del>{check.text}</del> : check.text}\r\n            </FormGroup>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ToggleTextCard\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Card, Button, CardHeader, CardBody,\r\n    CardTitle, Col, FormGroup, Input,\r\n} from 'reactstrap';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport ToggleTextCard from '../ToggleTextCard/ToggleTextCard';\r\n\r\nfunction CardTodo({ item }) {\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [dropdownId, setDropdownId] = useState(null)\r\n    const toggle = (id) => {\r\n        setDropdownOpen(prevState => !prevState);\r\n        setDropdownId(id)\r\n    };\r\n\r\n    const [toggleId, setToggleId] = useState(null)\r\n    const [toggleShow, setToggleShow] = useState(false)\r\n    const toggleButton = (id) => {\r\n        setToggleId(id);\r\n        setToggleShow(!toggleShow)\r\n    }\r\n    return (\r\n        <Col key={item.id} className=\"p-3\">\r\n            <Card>\r\n                <CardHeader className=\"d-flex justify-content-between\">\r\n                    <p>{item.title}</p>\r\n                    <Dropdown isOpen={dropdownOpen} toggle={() => toggle(item.id)}>\r\n                        <DropdownToggle caret>\r\n                            Actions\r\n                        </DropdownToggle>\r\n                        {\r\n                            dropdownOpen && dropdownId == item.id ?\r\n                                <DropdownMenu>\r\n                                    <DropdownItem>Edit</DropdownItem>\r\n                                    <DropdownItem>Delete</DropdownItem>\r\n                                </DropdownMenu>\r\n                                : <div></div>\r\n                        }\r\n\r\n                    </Dropdown>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <CardTitle>{item.text}</CardTitle>\r\n                    <Button onClick={() => toggleButton(item.id)}>Toggle</Button>\r\n                    {\r\n                        toggleId == item.id && toggleShow ?\r\n                            <ol>\r\n                                {item.checkList.map(check =>\r\n                                    <ToggleTextCard check={check} />\r\n                                )}\r\n                            </ol>\r\n                            : <div></div>\r\n                    }\r\n                </CardBody>\r\n            </Card>\r\n        </Col>\r\n\r\n    )\r\n}\r\n\r\nexport default CardTodo\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row } from 'reactstrap'\r\nimport { connect } from 'react-redux';\r\nimport Search from '../Search/Search'\r\nimport CardTodo from '../CardTodo/CardTodo';\r\nimport './Todo.css';\r\n\r\n\r\nfunction Todo({ todoList }) {\r\n    const [search, setSearch] = useState('');\r\n    // const [todolist, setTodolist] = useState([\r\n    //     {\r\n    //         id: 1,\r\n    //         title: \"title1\",\r\n    //         checkList: [\r\n    //             { id: 1, text: \"text1\", status: false },\r\n    //             { id: 2, text: \"text2\", status: false },\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: \"title2\",\r\n    //         checkList: [\r\n    //             { id: 1, text: \"text1\", status: false },\r\n    //             { id: 2, text: \"text2\", status: true },\r\n    //         ]\r\n    //     }\r\n    // ]);\r\n    const handleChange = (event) => {\r\n        const { value } = event.target;\r\n        setSearch(value);\r\n    }\r\n\r\n    let searchTodo = todoList.filter(item => item.title.toLowerCase().startsWith(search.toLowerCase()));\r\n\r\n    return (\r\n        <div className=\"border rounded py-3\">\r\n            <Search handleChange={handleChange} search={search} />\r\n            <Row className=\"justify-content-center px-5\" xs={1} md={2} xl={3}>\r\n                {\r\n                    searchTodo.map(item =>\r\n                        <CardTodo item={item} />\r\n                    )\r\n                }\r\n            </Row>\r\n            <Link to={\"/add\"}><button className=\"btn btn-primary add-button\">Add</button></Link>\r\n        </div >\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoList: state.todoList.todo_List,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Todo);\r\n","\r\nexport default {\r\n    ADD_TODO: \"ADD_TODO\",\r\n    \r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Form, Input, FormGroup, Label, Button } from 'reactstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../../Redux/Todo/Todo.action';\r\n\r\nfunction AddTodo({ todoList, addTodo }) {\r\n    const history = useHistory();\r\n    const [checkItem, setCheckItem] = useState([{\r\n        id: 1,\r\n        text: \"text1\",\r\n        status: false\r\n    }])\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // addTodo()\r\n        history.push('/')\r\n    }\r\n    const addCheckItem = () => {\r\n        checkItem.id = checkItem.length + 1\r\n        setCheckItem([...checkItem, checkItem])\r\n    }\r\n    return (\r\n        <Form className=\"col-6 mx-auto mt-5 p-3 border rounded-lg bg-info\" onSubmit={handleSubmit}>\r\n            <FormGroup>\r\n                <Label htmlFor=\"name\" className=\"mb-0\">Title:</Label>\r\n                <Input placeholder='title' type=\"text\" name='name' id='name' onChange={handleChange} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"email\" className=\"mb-0\">Text:</Label>\r\n                <Input placeholder='text' type=\"email\" name='email' id='email' onChange={handleChange} />\r\n            </FormGroup>\r\n\r\n            {checkItem.map(item =>\r\n                <div key={item.id}>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"email\" className=\"mb-0\">Check item {item.id}</Label>\r\n                        <Input placeholder={`Check item ${item.id}`} type=\"email\" name='email' id='email' onChange={handleChange} />\r\n                    </FormGroup>\r\n                </div>\r\n            )}\r\n\r\n            <Button color='success' className=\"border\" type=\"submit\">save</Button> {' '}\r\n            <Button color='primary' className=\"border\" type=\"button\" onClick={addCheckItem} >add check item</Button> {' '}\r\n            <Button type=\"button\" className=\"border\" >clear</Button>\r\n        </Form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoList: state.todoList.todo_List,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { addTodo })(AddTodo);","import types from './Todo.types';\r\n\r\n\r\nexport const addTodo = (todo) => {\r\n    return {\r\n        type: types.ADD_TODO,\r\n        payload: todo\r\n    }\r\n}\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {store} from './Redux/store';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Todo from './Component/todo/Todo';\nimport AddTodo from './view/AddTodo/AddTodo';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/add\">\n                <AddTodo />\n              </Route>\n              <Route path=\"/\">\n                <Todo />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}