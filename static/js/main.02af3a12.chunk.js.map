{"version":3,"sources":["Redux/Todo/Todo.reducer.js","Redux/RootReducer.js","Redux/store.js","Component/Search/Search.jsx","Redux/Todo/Todo.types.js","Component/ToggleTextCard/ToggleTextCard.jsx","Redux/Todo/Todo.action.js","Component/CardTodo/CardTodo.jsx","Component/todo/Todo.jsx","view/AddTodo/AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","todo_List","id","title","text","checkList","status","todoReducer","state","action","type","payload","filter","item","map","todoId","check","itemId","combineReducers","todoList","middlewares","logger","store","createStore","RootReducer","applyMiddleware","Search","search","handleChange","Form","className","FormGroup","Label","htmlFor","Input","name","value","onChange","connect","changeCheckItemStatus","types","checkItem","useState","checked","deleteTodo","dropdownOpen","setDropdownOpen","dropdownId","setDropdownId","toggleId","setToggleId","toggleShow","setToggleShow","Col","Card","CardHeader","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","onClick","CardBody","CardTitle","Button","key","setSearch","searchTodo","toLowerCase","startsWith","event","target","Row","xs","md","xl","to","length","addTodo","todo","history","useHistory","todos","setTodos","setCheckItem","onSubmit","preventDefault","push","placeholder","e","color","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAAMA,EAAe,CACjBC,UAAW,CACP,CACIC,GAAI,EACJC,MAAO,SACPC,KAAM,QACNC,UAAW,CACP,CAAEH,GAAI,EAAGE,KAAM,QAASE,QAAQ,GAChC,CAAEJ,GAAI,EAAGE,KAAM,QAASE,QAAQ,KAGxC,CACIJ,GAAI,EACJC,MAAO,SACPC,KAAM,QACNC,UAAW,CACP,CAAEH,GAAI,EAAGE,KAAM,QAASE,QAAQ,GAChC,CAAEJ,GAAI,EAAGE,KAAM,QAASE,QAAQ,KAGxC,CACIJ,GAAI,EACJC,MAAO,SACPC,KAAM,QACNC,UAAW,CACP,CAAEH,GAAI,EAAGE,KAAM,QAASE,QAAQ,GAChC,CAAEJ,GAAI,EAAGE,KAAM,QAASE,QAAQ,OAoCjCC,EA/BK,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCAC1CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACd,OAAQD,GACJ,IAAM,WACF,OAAO,eACAF,EADP,CAEIP,UAAU,GAAD,mBAAMO,EAAMP,WAAZ,CAAuBU,MAExC,IAAM,cACF,OAAO,eACAH,EADP,CAEIP,UAAWO,EAAMP,UAAUW,QAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOS,OAE9D,IAAM,YACF,OAAO,eACAH,EADP,CAEIP,UAAWO,EAAMP,UAAUa,KAAI,SAAAD,GAAI,OAAIA,EAAKX,IAAMS,EAAQT,GAAKS,EAASE,OAEhF,IAAM,qBACF,OAAO,eACAL,EADP,CAEIP,UAAWO,EAAMP,UAAUa,KAAI,SAAAD,GAAI,OAAIA,EAAKX,IAAMS,EAAQI,OAAnB,eAE5BF,EAF4B,CAEtBR,UAAWQ,EAAKR,UAAUS,KAAI,SAAAE,GAAK,OAAIA,EAAMd,IAAMS,EAAQM,OAApB,eACvCD,EADuC,CAChCV,QAASU,EAAMV,SAAWU,OAC1CH,OAEhB,QACI,OAAOL,ICxDJU,cAAgB,CAC3BC,SAAUZ,I,QCARa,EAAc,C,OAACC,GAERC,EAAQC,YACjBC,EACAC,IAAe,WAAf,EAAmBL,I,uECMRM,MAXf,YAAyC,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,aACrB,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,kCACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAf,eACA,kBAACC,EAAA,EAAD,CAAOxB,KAAK,SAASR,GAAG,SAASiC,KAAM,SAAUC,MAAOT,EAAQU,SAAUT,O,gFCP3E,EACD,WADC,EAEE,cAFF,EAIS,qB,MCcxB,IAKeU,cAAQ,KAAM,CAACC,sBCHO,SAACxB,EAAQE,GAC1C,MAAO,CACHP,KAAM8B,EACN7B,QAAS,CAACI,SAAQE,aDAXqB,EAlBf,YAAoE,IAA1CzB,EAAyC,EAAzCA,KAAM4B,EAAmC,EAAnCA,UAAUF,EAAyB,EAAzBA,sBAAyB,EACnCG,mBAAS,MAD0B,mBAG/D,OAH+D,UAI3D,wBAAIZ,UAAU,YACV,kBAACC,EAAA,EAAD,CAAWf,OAAK,GACZ,kBAACkB,EAAA,EAAD,CAAOxB,KAAK,WAAWyB,KAAK,QAAQjC,GAAG,eAAemC,SAAU,kBAAME,EAAsB1B,EAAKX,GAAIuC,EAAUvC,KAAKyC,QAASF,EAAUnC,SACtImC,EAAUnC,OAAS,6BAAMmC,EAAUrC,MAAcqC,EAAUrC,UEmD7DkC,kBAAQ,KAAM,CAAEM,WDvDL,SAAC1C,GACvB,MAAO,CACHQ,KAAM8B,EACN7B,QAAST,KCoDFoC,EAxDf,YAAyC,IAArBzB,EAAoB,EAApBA,KAAM+B,EAAc,EAAdA,WAAc,EAEIF,oBAAS,GAFb,mBAE7BG,EAF6B,KAEfC,EAFe,OAGAJ,mBAAS,MAHT,mBAG7BK,EAH6B,KAGjBC,EAHiB,OASJN,mBAAS,MATL,mBAS7BO,EAT6B,KASnBC,EATmB,OAUAR,oBAAS,GAVT,mBAU7BS,EAV6B,KAUjBC,EAViB,KAgBpC,OACI,kBAACC,EAAA,EAAD,CAAKvB,UAAU,OACX,kBAACwB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYzB,UAAU,kCAClB,2BAAIjB,EAAKV,OACT,kBAACqD,EAAA,EAAD,CAAUC,OAAQZ,EAAca,OAAQ,kBAjBxCxD,EAiBqDW,EAAKX,GAhBtE4C,GAAgB,SAAAa,GAAS,OAAKA,UAC9BX,EAAc9C,GAFH,IAACA,IAkBI,kBAAC0D,EAAA,EAAD,CAAgBC,OAAK,GAArB,WAIIhB,GAAgBE,GAAclC,EAAKX,GAC/B,kBAAC4D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAcC,QAAS,kBAAMpB,EAAW/B,EAAKX,MAA7C,WAEF,gCAKlB,kBAAC+D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAYrD,EAAKT,MACjB,kBAAC+D,EAAA,EAAD,CAAQH,QAAS,kBA3BX9D,EA2B8BW,EAAKX,GA1BrDgD,EAAYhD,QACZkD,GAAeD,GAFE,IAACjD,IA2BN,UAEI+C,GAAYpC,EAAKX,IAAMiD,EACnB,4BACKtC,EAAKR,UAAUS,KAAI,SAAA2B,GAAS,OACzB,kBAAC,EAAD,CAAgB5B,KAAMA,EAAM4B,UAAWA,EAAW2B,IAAK3B,EAAUvC,SAGvE,oC,MCpB9B,IAKeoC,eALS,SAAC9B,GACrB,MAAO,CACHW,SAAUX,EAAMW,SAASlB,aAGO,GAAzBqC,EA9Bf,YAA6B,IAAbnB,EAAY,EAAZA,SAAY,EAEIuB,mBAAS,IAFb,mBAEjBf,EAFiB,KAET0C,EAFS,KASpBC,EAAanD,EAASP,QAAO,SAAAC,GAAI,OAAIA,EAAKV,MAAMoE,cAAcC,WAAW7C,EAAO4C,kBAEpF,OACI,yBAAKzC,UAAU,uBACX,kBAAC,EAAD,CAAQF,aATK,SAAC6C,GAAW,IACrBrC,EAAUqC,EAAMC,OAAhBtC,MACRiC,EAAUjC,IAO8BT,OAAQA,IAC5C,kBAACgD,EAAA,EAAD,CAAK7C,UAAU,8BAA8B8C,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAEvDR,EAAWxD,KAAI,SAAAD,GAAI,OACf,kBAAC,EAAD,CAAUA,KAAMA,EAAMuD,IAAKvD,EAAKX,SAI5C,kBAAC,IAAD,CAAM6E,GAAI,QAAQ,4BAAQjD,UAAU,8BAAlB,Y,QCuC9B,IAKeQ,eALS,SAAC9B,GACrB,MAAO,CACHwE,OAAQxE,EAAMW,SAASlB,UAAU+E,UAGD,CAAEC,QHvEnB,SAACC,GACpB,MAAO,CACHxE,KAAM8B,EACN7B,QAASuE,KGoEF5C,EAnEf,YAAuC,IAApB2C,EAAmB,EAAnBA,QAASD,EAAU,EAAVA,OAClBG,EAAUC,cADkB,EAER1C,mBAAS,CAC/BxC,GAAI8E,EAAS,EACb7E,MAAO,GACPC,KAAM,KALwB,mBAE3BiF,EAF2B,KAEpBC,EAFoB,OAOA5C,mBAAS,CAAC,CACxCxC,GAAI,EACJE,KAAM,GACNE,QAAQ,KAVsB,mBAO3BmC,EAP2B,KAOhB8C,EAPgB,KAa5B3D,EAAe,SAAC6C,GAAW,IAAD,EACJA,EAAMC,OAAtBvC,EADoB,EACpBA,KAAMC,EADc,EACdA,MACdkD,EAAS,eAAKD,EAAN,eAAclD,EAAOC,MAmBjC,OACI,kBAACP,EAAA,EAAD,CAAMC,UAAU,mDAAmD0D,SAflD,SAACf,GAClBA,EAAMgB,iBACNR,EAAQ,eAAKI,EAAN,CAAahF,UAAWoC,KAC/B0C,EAAQO,KAAK,OAaT,kBAAC3D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,QAAQH,UAAU,QAAjC,UACA,kBAACI,EAAA,EAAD,CAAOyD,YAAY,QAAQjF,KAAK,OAAOyB,KAAK,QAAQjC,GAAG,QAAQmC,SAAUT,KAE7E,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOH,UAAU,QAAhC,SACA,kBAACI,EAAA,EAAD,CAAOyD,YAAY,OAAOjF,KAAK,OAAOyB,KAAK,OAAOjC,GAAG,OAAOmC,SAAUT,KAGzEa,EAAU3B,KAAI,SAAAD,GAAI,OACf,yBAAKuD,IAAKvD,EAAKX,IACX,kBAAC6B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,YAAYH,UAAU,QAArC,cAAwDjB,EAAKX,IAC7D,kBAACgC,EAAA,EAAD,CAAOyD,YAAW,qBAAgB9E,EAAKX,IAAMQ,KAAK,OAAOyB,KAAK,YAAYjC,GAAG,YAAYmC,SAAU,SAACuD,GAAD,OAhC7FnB,EAgCqHmB,EAhC9G1F,EAgCiHW,EAAKX,QA/BnJqF,EAAa9C,EAAU3B,KAAI,SAAAD,GAAI,OAAIA,EAAKX,IAAMA,EAAX,eAAqBW,EAArB,CAA2BT,KAAMqE,EAAMC,OAAOtC,QAAUvB,MADtE,IAAC4D,EAAOvE,UAqCzB,kBAACiE,EAAA,EAAD,CAAQ0B,MAAM,UAAU/D,UAAU,SAASpB,KAAK,UAAhD,QAnBJ,IAmB4E,IACxE,kBAACyD,EAAA,EAAD,CAAQ0B,MAAM,UAAU/D,UAAU,SAASpB,KAAK,SAASsD,QA9B5C,WACjBuB,EAAa,GAAD,mBAAK9C,GAAL,CAAgB,CAAEvC,GAAIuC,EAAUuC,OAAS,EAAG5E,KAAMqC,EAAUrC,KAAME,QAAQ,QA6BlF,kBApBJ,IAoB8G,IAC1G,kBAAC6D,EAAA,EAAD,CAAQzD,KAAK,SAASoB,UAAU,SAASkC,QA5B7B,cA4BZ,aC9BG8B,MArBf,WACE,OACE,kBAAC,IAAD,CAAUxE,MAAOA,GACf,yBAAKQ,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiE,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,aCXIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02af3a12.chunk.js","sourcesContent":["const initialState = {\r\n    todo_List: [\r\n        {\r\n            id: 1,\r\n            title: \"title1\",\r\n            text: \"text1\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: false },\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            title: \"title2\",\r\n            text: \"text2\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: true },\r\n            ]\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"title3\",\r\n            text: \"text3\",\r\n            checkList: [\r\n                { id: 1, text: \"text1\", status: false },\r\n                { id: 2, text: \"text2\", status: true },\r\n            ]\r\n        }\r\n    ]\r\n}\r\nconst todoReducer = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case (\"ADD_TODO\"):\r\n            return {\r\n                ...state,\r\n                todo_List: [...state.todo_List, payload]\r\n            }\r\n        case (\"DELETE_TODO\"):\r\n            return {\r\n                ...state,\r\n                todo_List: state.todo_List.filter(item => item.id !== payload)\r\n            }\r\n        case (\"EDIT_TODO\"):\r\n            return {\r\n                ...state,\r\n                todo_List: state.todo_List.map(item => item.id == payload.id ? payload: item)\r\n            }\r\n        case (\"CHANGE_ITEM_STATUS\"):\r\n            return {\r\n                ...state,\r\n                todo_List: state.todo_List.map(item => item.id == payload.todoId ?\r\n                    {\r\n                        ...item, checkList: item.checkList.map(check => check.id == payload.itemId ?\r\n                            { ...check, status: !check.status } : check)\r\n                    } : item)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default todoReducer;","import {combineReducers} from 'redux';\r\nimport todoReducer from './Todo/Todo.reducer';\r\n\r\nexport default combineReducers({\r\n    todoList: todoReducer,\r\n})","import { applyMiddleware, createStore } from 'redux';\r\nimport RootReducer from './RootReducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst middlewares = [logger];\r\n\r\nexport const store = createStore(\r\n    RootReducer,\r\n    applyMiddleware(...middlewares)\r\n)","import React from 'react'\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nfunction Search({search, handleChange}) {\r\n    return (\r\n        <Form className=\"px-5 py-2 mx-5 rounded bg-info\">\r\n            <FormGroup>\r\n                <Label htmlFor='search'>Search todo</Label>\r\n                <Input type='search' id='search' name={'search'} value={search} onChange={handleChange} />\r\n            </FormGroup>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","\r\nexport default {\r\n    ADD_TODO: \"ADD_TODO\",\r\n    DELETE_TODO: \"DELETE_TODO\",\r\n    EDIT_TODO: \"EDIT_TODO\",\r\n    CHANGE_ITEM_STATUS: \"CHANGE_ITEM_STATUS\"\r\n}","import React, { useState } from 'react';\r\nimport { FormGroup, Input } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport {changeCheckItemStatus} from '../../Redux/Todo/Todo.action'\r\nimport './ToggleTextCard.css'\r\n\r\nfunction ToggleTextCard({ item, checkItem,changeCheckItemStatus }) {\r\n    const [status, setStatus] = useState(null)\r\n\r\n    return (\r\n        <li className=\"liToggle\">\r\n            <FormGroup check>\r\n                <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck\" onChange={() => changeCheckItemStatus(item.id, checkItem.id)} checked={checkItem.status} />\r\n                {checkItem.status ? <del>{checkItem.text}</del> : checkItem.text}\r\n            </FormGroup>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoList: state.todoList.todo_List,\r\n    }\r\n}\r\nexport default connect(null, {changeCheckItemStatus})(ToggleTextCard);\r\n","import types from './Todo.types';\r\n\r\n\r\nexport const addTodo = (todo) => {\r\n    return {\r\n        type: types.ADD_TODO,\r\n        payload: todo\r\n    }\r\n}\r\nexport const deleteTodo = (id) => {\r\n    return {\r\n        type: types.DELETE_TODO,\r\n        payload: id\r\n    }\r\n}\r\nexport const editTodo = (todo) => {\r\n    return {\r\n        type: types.EDIT_TODO,\r\n        payload: todo\r\n    }\r\n}\r\nexport const changeCheckItemStatus = (todoId, itemId) => {\r\n    return {\r\n        type: types.CHANGE_ITEM_STATUS,\r\n        payload: {todoId, itemId}\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Card, Button, CardHeader, CardBody, CardTitle, Col } from 'reactstrap';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport ToggleTextCard from '../ToggleTextCard/ToggleTextCard';\r\nimport { connect } from 'react-redux';\r\nimport { deleteTodo } from '../../Redux/Todo/Todo.action';\r\n\r\n\r\nfunction CardTodo({ item, deleteTodo }) {\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [dropdownId, setDropdownId] = useState(null)\r\n    const toggle = (id) => {\r\n        setDropdownOpen(prevState => !prevState);\r\n        setDropdownId(id)\r\n    };\r\n\r\n    const [toggleId, setToggleId] = useState(null)\r\n    const [toggleShow, setToggleShow] = useState(false)\r\n    const toggleButton = (id) => {\r\n        setToggleId(id);\r\n        setToggleShow(!toggleShow)\r\n    }\r\n\r\n    return (\r\n        <Col className=\"p-3\">\r\n            <Card>\r\n                <CardHeader className=\"d-flex justify-content-between\">\r\n                    <p>{item.title}</p>\r\n                    <Dropdown isOpen={dropdownOpen} toggle={() => toggle(item.id)}>\r\n                        <DropdownToggle caret>\r\n                            Actions\r\n                        </DropdownToggle>\r\n                        {\r\n                            dropdownOpen && dropdownId == item.id ?\r\n                                <DropdownMenu>\r\n                                    <DropdownItem>Edit</DropdownItem>\r\n                                    <DropdownItem onClick={() => deleteTodo(item.id)}>Delete</DropdownItem>\r\n                                </DropdownMenu>\r\n                                : <div></div>\r\n                        }\r\n\r\n                    </Dropdown>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <CardTitle>{item.text}</CardTitle>\r\n                    <Button onClick={() => toggleButton(item.id)}>Toggle</Button>\r\n                    {\r\n                        toggleId == item.id && toggleShow ?\r\n                            <ol>\r\n                                {item.checkList.map(checkItem =>\r\n                                    <ToggleTextCard item={item} checkItem={checkItem} key={checkItem.id} />\r\n                                )}\r\n                            </ol>\r\n                            : <div></div>\r\n                    }\r\n                </CardBody>\r\n            </Card>\r\n        </Col>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default connect(null, { deleteTodo })(CardTodo);\r\n","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row } from 'reactstrap'\r\nimport { connect } from 'react-redux';\r\nimport Search from '../Search/Search'\r\nimport CardTodo from '../CardTodo/CardTodo';\r\nimport './Todo.css';\r\n\r\n\r\nfunction Todo({ todoList }) {\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        const { value } = event.target;\r\n        setSearch(value);\r\n    }\r\n\r\n    let searchTodo = todoList.filter(item => item.title.toLowerCase().startsWith(search.toLowerCase()));\r\n\r\n    return (\r\n        <div className=\"border rounded py-3\">\r\n            <Search handleChange={handleChange} search={search} />\r\n            <Row className=\"justify-content-center px-5\" xs={1} md={2} xl={3}>\r\n                {\r\n                    searchTodo.map(item =>\r\n                        <CardTodo item={item} key={item.id} />\r\n                    )\r\n                }\r\n            </Row>\r\n            <Link to={\"/add\"}><button className=\"btn btn-primary add-button\">Add</button></Link>\r\n        </div >\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoList: state.todoList.todo_List,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(Todo);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Form, Input, FormGroup, Label, Button } from 'reactstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../../Redux/Todo/Todo.action';\r\n\r\nfunction AddTodo({ addTodo, length }) {\r\n    const history = useHistory();\r\n    const [todos, setTodos] = useState({\r\n        id: length + 1,\r\n        title: \"\",\r\n        text: \"\",\r\n    })\r\n    const [checkItem, setCheckItem] = useState([{\r\n        id: 1,\r\n        text: \"\",\r\n        status: false\r\n    }])\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setTodos({ ...todos, [name]: value })\r\n    }\r\n    const handleChangeItem = (event, id) => {\r\n        setCheckItem(checkItem.map(item => item.id == id ? { ...item, text: event.target.value } : item))\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        addTodo({ ...todos, checkList: checkItem })\r\n        history.push('/')\r\n    }\r\n    const addCheckItem = () => {\r\n        setCheckItem([...checkItem, { id: checkItem.length + 1, text: checkItem.text, status: false }])\r\n    }\r\n    const handleClear = () => {\r\n        // setTodos({\r\n        //     title: \"\",\r\n        //     text: \"\",\r\n        // })\r\n    }\r\n    return (\r\n        <Form className=\"col-6 mx-auto mt-5 p-3 border rounded-lg bg-info\" onSubmit={handleSubmit}>\r\n            <FormGroup>\r\n                <Label htmlFor=\"title\" className=\"mb-0\">Title:</Label>\r\n                <Input placeholder='title' type=\"text\" name='title' id='title' onChange={handleChange} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"text\" className=\"mb-0\">Text:</Label>\r\n                <Input placeholder='text' type=\"text\" name='text' id='text' onChange={handleChange} />\r\n            </FormGroup>\r\n\r\n            {checkItem.map(item =>\r\n                <div key={item.id}>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"checkItem\" className=\"mb-0\">Check item {item.id}</Label>\r\n                        <Input placeholder={`Check item ${item.id}`} type=\"text\" name='checkItem' id='checkItem' onChange={(e) => handleChangeItem(e, item.id)} />\r\n                    </FormGroup>\r\n                </div>\r\n            )}\r\n\r\n            <Button color='success' className=\"border\" type=\"submit\">save</Button> {' '}\r\n            <Button color='primary' className=\"border\" type=\"button\" onClick={addCheckItem} >add check item</Button> {' '}\r\n            <Button type=\"button\" className=\"border\" onClick={handleClear}>clear</Button>\r\n        </Form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        length: state.todoList.todo_List.length,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { addTodo })(AddTodo);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {store} from './Redux/store';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Todo from './Component/todo/Todo';\nimport AddTodo from './view/AddTodo/AddTodo';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/add\">\n                <AddTodo />\n              </Route>\n              <Route path=\"/\">\n                <Todo />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}